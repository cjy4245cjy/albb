'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _tweenFunctions = require('tween-functions');

var _tweenFunctions2 = _interopRequireDefault(_tweenFunctions);

var _raf = require('raf');

var _raf2 = _interopRequireDefault(_raf);

var _EventDispatcher = require('./EventDispatcher');

var _EventDispatcher2 = _interopRequireDefault(_EventDispatcher);

var _util = require('./util');

var _Mapped = require('./Mapped');

var _Mapped2 = _interopRequireDefault(_Mapped);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// 设置默认数据
function defaultData(vars) {
  return {
    ease: vars.ease || 'easeInOutQuad',
    duration: vars.duration || 450,
    docHeight: vars.docHeight,
    scrollInterval: vars.scrollInterval || 1000,
    loop: vars.loop || false
  };
}

var ScrollScreen = {
  init: function init(vars) {
    var _this = this;

    this.vars = defaultData(vars || {});
    this.rafID = -1;
    this.toHeight = -1;
    this.num = 0;
    // this.currentNum = 0;
    ['raf', 'cancelRequestAnimationFrame', 'onWheel', 'startScroll'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    _EventDispatcher2["default"].addEventListener('wheel.scrollWheel', this.onWheel);
    _EventDispatcher2["default"].addEventListener('scroll.scrollScreen', this.scrollEvent);
    // 刚进入时滚动条位置
    // requestAnimationFrame(this.startScroll)
    setTimeout(this.startScroll);
  },
  scrollEvent: function scrollEvent() {
    var _this2 = this;

    var _mapped = _Mapped2["default"].getMapped();
    var _arr = _mapped.__arr;
    this.scrollTop = (0, _util.currentScrollTop)();
    _arr.forEach(function (str, i) {
      var dom = _mapped[str];
      var domOffsetTop = dom.offsetTop;
      var domHeight = dom.getBoundingClientRect().height;
      if (_this2.scrollTop >= domOffsetTop && _this2.scrollTop < domOffsetTop + domHeight) {
        _this2.currentNum = i;
      }
    });
  },
  startScroll: function startScroll() {
    var _this3 = this;

    var _mapped = _Mapped2["default"].getMapped();
    var _arr = _mapped.__arr;
    if (!_arr.length) {
      _EventDispatcher2["default"].removeEventListener('wheel.scrollWheel', this.onWheel);
      return;
    }
    this.scrollTop = window.pageYOffset;
    _arr.forEach(function (str, i) {
      var dom = _mapped[str];
      var domOffsetTop = dom.offsetTop;
      var domHeight = dom.getBoundingClientRect().height;
      if (_this3.scrollTop >= domOffsetTop && _this3.scrollTop < domOffsetTop + domHeight) {
        _this3.num = i;
        _this3.toHeight = domOffsetTop;
        // this.currentNum = this.num;
      }
    });
    // 如果 toHeight === -1 且 this.scrollTop 有值时；
    if (this.toHeight === -1) {
      if (this.scrollTop > 0) {
        var endDom = _Mapped2["default"].get(_Mapped2["default"].getMapped().__arr[_Mapped2["default"].getMapped().__arr.length - 1]);
        var windowHeight = document.documentElement.clientHeight;
        var tooNum = Math.ceil((this.scrollTop - endDom.offsetTop - endDom.getBoundingClientRect().height) / windowHeight);
        this.num = _Mapped2["default"].getMapped().__arr.length + tooNum;
        // this.currentNum = this.num;
      }
      return;
    }
    if (this.toHeight !== this.scrollTop) {
      this.initTime = Date.now();
      this.rafID = (0, _raf2["default"])(this.raf);
    } else {
      this.toHeight = -1;
    }
  },
  raf: function raf() {
    var _this4 = this;

    var duration = this.vars.duration;
    var now = Date.now();
    var progressTime = now - this.initTime > duration ? duration : now - this.initTime;
    var easeValue = _tweenFunctions2["default"][this.vars.ease](progressTime, this.scrollTop, this.toHeight, duration);
    window.scrollTo(window.scrollX, easeValue);
    if (progressTime === duration) {
      this.cancelRequestAnimationFrame();
      setTimeout(function () {
        _this4.toHeight = -1;
      }, this.vars.scrollInterval);
    } else {
      this.rafID = (0, _raf2["default"])(this.raf);
    }
  },
  cancelRequestAnimationFrame: function cancelRequestAnimationFrame() {
    _raf2["default"].cancel(this.rafID);
    this.rafID = -1;
  },
  onWheel: function onWheel(e) {
    var _this5 = this;

    var _mapped = _Mapped2["default"].getMapped();
    if (!_mapped.__arr.length) {
      _EventDispatcher2["default"].removeEventListener('wheel.scrollWheel', this.onWheel);
      return;
    }
    var deltaY = e.deltaY;
    e.preventDefault();
    // console.log(e.wheelDelta,e.deltaY)
    if (this.rafID === -1 && deltaY !== 0 && this.toHeight === -1) {
      // 如果滚动条托动过了，需要获取当前的num;
      var _arr = _mapped.__arr;
      var endDom = _Mapped2["default"].get(_arr[_arr.length - 1]);
      var startDom = _Mapped2["default"].get(_arr[0]);
      var windowHeight = document.documentElement.clientHeight;
      this.scrollTop = (0, _util.currentScrollTop)();
      _arr.forEach(function (str, i) {
        var dom = _mapped[str];
        var domOffsetTop = dom.offsetTop;
        var domHeight = dom.getBoundingClientRect().height;
        if (_this5.scrollTop >= domOffsetTop && _this5.scrollTop < domOffsetTop + domHeight) {
          _this5.num = i;
        }
      });
      var startManyHeight = startDom.offsetTop;
      var startManyScale = startManyHeight ? Math.ceil(startManyHeight / windowHeight) : 0;
      var tooNum = void 0;
      if (this.scrollTop > endDom.offsetTop + endDom.getBoundingClientRect().height) {
        tooNum = Math.ceil((this.scrollTop - endDom.offsetTop - endDom.getBoundingClientRect().height) / windowHeight);
        this.num = _arr.length + tooNum;
      } else if (this.scrollTop < startDom.offsetTop) {
        tooNum = Math.ceil(-(this.scrollTop - startManyHeight) / windowHeight);
        this.num = -tooNum;
      }
      if (deltaY < 0) {
        this.num--;
      } else if (deltaY > 0) {
        this.num++;
      }
      // docHeight: 在 body, html 设了 100% 的情况下,给用户设置，如查没设置用默认的。。
      var docHeight = this.vars.docHeight || document.documentElement.getBoundingClientRect().height;
      var manyHeight = docHeight - endDom.offsetTop - endDom.getBoundingClientRect().height;
      var manyScale = manyHeight ? Math.ceil(manyHeight / windowHeight) : 0;
      var maxNum = _arr.length + manyScale;
      if (this.vars.loop) {
        this.num = this.num < -startManyScale ? maxNum - 1 : this.num;
        this.num = this.num >= maxNum ? -startManyScale : this.num;
      } else {
        this.num = this.num <= -startManyScale ? -startManyScale : this.num;
        this.num = this.num >= maxNum ? maxNum : this.num;
      }
      if (this.num === this.currentNum) {
        return;
      }
      this.initTime = Date.now();
      var currentDom = _Mapped2["default"].get(_Mapped2["default"].getMapped().__arr[this.num]);
      this.toHeight = currentDom ? currentDom.offsetTop : null;
      this.toHeight = typeof this.toHeight !== 'number' ? endDom.offsetTop + endDom.getBoundingClientRect().height + windowHeight * (this.num - _Mapped2["default"].getMapped().__arr.length) : this.toHeight;
      this.toHeight = this.toHeight < 0 ? 0 : this.toHeight;
      this.toHeight = this.toHeight > docHeight - windowHeight ? docHeight - windowHeight : this.toHeight;
      this.rafID = (0, _raf2["default"])(this.raf);
      // this.currentNum = this.num;
    }
  },
  unMount: function unMount() {
    _EventDispatcher2["default"].removeEventListener('wheel.scrollWheel', this.onWheel);
    _EventDispatcher2["default"].removeEventListener('scroll.scrollScreen', this.scrollEvent);
  }
};
exports["default"] = {
  init: ScrollScreen.init.bind(ScrollScreen),
  unMount: ScrollScreen.unMount.bind(ScrollScreen)
};
module.exports = exports['default'];