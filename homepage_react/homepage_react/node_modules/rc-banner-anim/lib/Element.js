'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _rcTweenOne = require('rc-tween-one');

var _rcTweenOne2 = _interopRequireDefault(_rcTweenOne);

var _ticker = require('rc-tween-one/lib/ticker');

var _ticker2 = _interopRequireDefault(_ticker);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _tweenFunctions = require('tween-functions');

var _tweenFunctions2 = _interopRequireDefault(_tweenFunctions);

var _styleUtils = require('style-utils');

var _anim = require('./anim');

var _anim2 = _interopRequireDefault(_anim);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function noop() {}

var Element = function (_Component) {
  _inherits(Element, _Component);

  function Element() {
    _classCallCheck(this, Element);

    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));

    _this.state = {
      bgParallaxAnim: null,
      videoRect: {
        width: 'auto',
        height: 'auto',
        display: 'block'
      },
      mouseXY: null,
      domWH: null,
      onMouseMove: null,
      show: _this.props.show
    };
    _this.tickerId = -1;
    _this.isScroll = false;
    _this.delayTimeout = null;
    _this.tweenBool = false;
    _this.show = _this.state.show;
    ['onScroll', 'onResize', 'onMouseMove', 'onMouseEnter', 'getImgOrVideo', 'videoLoadedData', 'addScrollEvent', 'getFollowStyle', 'followAnalysisType', 'getFollowMouseMove', 'getChildren', 'animEnd', 'animChildren'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    return _this;
  }

  Element.prototype.componentDidMount = function componentDidMount() {
    this.dom = _reactDom2["default"].findDOMNode(this);
    this.componentDidUpdate();
    if (this.props.bgType.indexOf('video') >= 0) {
      // 如果是 video，删除 grid 系列，位置发生变化，重加载了 video;
      delete _anim2["default"].grid;
      delete _anim2["default"].gridBar;
      this.video = this.dom.children[0].children[0];
    }
  };

  Element.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var show = nextProps.show;
    this.setState({ show: show });
  };

  Element.prototype.componentDidUpdate = function componentDidUpdate() {
    if (this.props.bgParallax && !this.isScroll) {
      this.addScrollEvent(this.props);
    }
  };

  Element.prototype.componentWillUnmount = function componentWillUnmount() {
    this.isScroll = false;
    this.cancelRequestAnimationFrame();
    if (window.addEventListener) {
      window.removeEventListener('resize', this.onResize);
      window.removeEventListener('scroll', this.onScroll);
    } else {
      window.detachEvent('onresize', this.onResize);
      window.detachEvent('onscroll', this.onScroll);
    }
  };

  Element.prototype.onMouseEnter = function onMouseEnter(e) {
    var domRect = this.dom.getBoundingClientRect();
    var scrollTop = (0, _utils.currentScrollTop)();
    var offsetTop = domRect.top + scrollTop;
    this.enterMouse = {
      x: e.pageX - domRect.left,
      y: e.pageY - offsetTop
    };
  };

  Element.prototype.onMouseMove = function onMouseMove(e) {
    var _this2 = this;

    var domRect = this.dom.getBoundingClientRect();
    var scrollTop = (0, _utils.currentScrollTop)();
    var offsetTop = domRect.top + scrollTop;
    var mouseXY = {
      x: e.pageX - domRect.left,
      y: e.pageY - offsetTop
    };
    var domWH = {
      w: domRect.width,
      h: domRect.height
    };

    if (this.props.followParallax && this.props.followParallax.ease) {
      (function () {
        _ticker2["default"].clear(_this2.tickerId);
        _this2.tickerId = 'bannerElementTicker' + (Date.now() + Math.random());
        var startFrame = _ticker2["default"].frame;
        _ticker2["default"].wake(_this2.tickerId, function () {
          var moment = (_ticker2["default"].frame - startFrame) * _ticker2["default"].perFrame;
          var start = typeof _this2.props.followParallax.minMove === 'number' ? _this2.props.followParallax.minMove : 0.08;
          var ratio = _tweenFunctions2["default"][_this2.props.followParallax.ease === true ? 'easeInOutQuad' : _this2.props.followParallax.ease](moment, start, 1, 1000);
          _this2.enterMouse.x = _this2.enterMouse.x + (mouseXY.x - _this2.enterMouse.x) * ratio;
          _this2.enterMouse.y = _this2.enterMouse.y + (mouseXY.y - _this2.enterMouse.y) * ratio;
          _this2.setState({
            mouseXY: _this2.enterMouse,
            domWH: domWH
          });
          if (moment >= 1000) {
            _ticker2["default"].clear(_this2.tickerId);
          }
        });
      })();
    } else {
      this.setState({
        mouseXY: mouseXY,
        domWH: domWH
      });
    }
  };

  Element.prototype.onResize = function onResize() {
    var domRect = this.dom.getBoundingClientRect();
    var videoDomRect = this.video.getBoundingClientRect();
    var scale = void 0;
    var videoRect = {
      display: 'block',
      position: 'relative',
      top: 0,
      left: 0
    };
    if (domRect.width / domRect.height > videoDomRect.width / videoDomRect.height) {
      scale = domRect.width / videoDomRect.width;
      videoRect.width = domRect.width;
      videoRect.height = videoDomRect.height * scale;
      videoRect.top = -(videoRect.height - domRect.height) / 2;
    } else {
      scale = domRect.height / videoDomRect.height;
      videoRect.height = domRect.height;
      videoRect.width = videoDomRect.width * scale;
      videoRect.left = -(videoRect.width - domRect.width) / 2;
    }
    this.setState({
      videoRect: videoRect
    });
  };

  Element.prototype.onScroll = function onScroll() {
    var _this3 = this;

    var scrollTop = (0, _utils.currentScrollTop)();
    var domHeight = this.props.elemOffset.height;
    var offsetTop = this.props.elemOffset.top;
    // scale 在出屏出时是 1, scrollTop 为 0 时是 0;
    var scale = scrollTop / (domHeight + offsetTop);
    scale = scale >= 1 ? 1 : scale;
    var _css = {};
    Object.keys(this.props.bgParallax).forEach(function (_key) {
      var key = (0, _styleUtils.getGsapType)(_key);
      var item = _this3.props.bgParallax[_key];
      var cssName = (0, _styleUtils.isConvert)(key);
      if (!Array.isArray(item)) {
        _css[cssName] = item;
        return;
      }
      var cssData = item[0] - scale * (item[0] - item[1]);
      var unit = (0, _styleUtils.getUnit)(key, cssData);
      if (cssName === 'transform') {
        _css[cssName] = (0, _styleUtils.mergeStyle)(_css[cssName] || '', (0, _styleUtils.getValues)(key, cssData, unit));
      } else if (cssName === 'filter') {
        _css[(0, _styleUtils.checkStyleName)(cssName)] = (0, _styleUtils.mergeStyle)(_css[cssName] || '', (0, _styleUtils.getValues)(key, cssData, unit));
      } else {
        _css[cssName] = cssData;
      }
    });
    this.setState({
      bgParallaxAnim: _css
    });
  };

  Element.prototype.getFollowStyle = function getFollowStyle(type, data) {
    var mouseData = this.state.mouseXY.x;
    var domData = this.state.domWH.w;
    var value = data.scale;
    if ((type.indexOf('y') >= 0 || type.indexOf('Y') >= 0) && type !== 'opacity') {
      mouseData = this.state.mouseXY.y;
      domData = this.state.domWH.h;
    }
    var d = -(mouseData - domData / 2) * value;
    if (type === 'opacity') {
      // 如果是透明度，，变换为value的区间，，最左边为 1 - value; 最右边为 1;
      d = mouseData / domData * value + 1 - value;
    }
    var unit = (0, _styleUtils.isConvert)(type) !== type ? (0, _styleUtils.getUnit)(type, d) : '';
    var css = (0, _styleUtils.isConvert)(type) !== type ? (0, _styleUtils.getValues)(type, d, unit) : d;
    return type.indexOf('backgroundPosition') >= 0 ? 'calc(' + (data.bgPosition || '50%') + ' + ' + css + 'px )' : css;
  };

  Element.prototype.getImgOrVideo = function getImgOrVideo() {
    var _this4 = this;

    var followObj = {};
    if (this.props.followParallax) {
      followObj.transition = this.props.followParallax.transition;
    }
    if (this.props.followParallax && this.state.domWH && this.state.mouseXY) {
      this.props.followParallax.data.forEach(function (item) {
        if (!item.key) {
          return;
        }
        if (item.key === 'bgElem' || item.key === 'bannerBgElem') {
          (0, _utils.dataToArray)(item.type).map(_this4.followAnalysisType.bind(_this4, item)).forEach(function (_item) {
            return followObj[_item.cssName] = (0, _styleUtils.mergeStyle)(followObj[_item.cssName], _item.data);
          });
        }
      });
    }
    var className = ('banner-anim-elem-background ' + (this.props.bgPrefixCls || '')).trim();
    var dom = this.props.bgType.indexOf('video') >= 0 ? _react2["default"].createElement(
      'div',
      { className: className,
        style: _extends({}, this.state.bgParallaxAnim, followObj),
        key: 'bgElem'
      },
      _react2["default"].createElement(
        'video',
        { loop: true, autoPlay: true,
          style: this.state.videoRect,
          onLoadedData: this.videoLoadedData
        },
        _react2["default"].createElement('source', { src: this.props.bg || this.props.img, type: this.props.bgType })
      )
    ) : _react2["default"].createElement('div', {
      className: className,
      style: _extends({
        backgroundImage: 'url(' + (this.props.bg || this.props.img) + ')'
      }, this.state.bgParallaxAnim, followObj),
      key: 'bgElem'
    });
    return dom;
  };

  Element.prototype.getFollowMouseMove = function getFollowMouseMove() {
    var _this5 = this;

    var onMouseMove = void 0;
    if (this.props.followParallax) {
      if (this.props.followParallax.delay) {
        onMouseMove = !this.delayTimeout ? null : this.state.onMouseMove;
        this.delayTimeout = this.delayTimeout || _ticker2["default"].timeout(function () {
          _this5.setState({
            onMouseMove: _this5.onMouseMove
          });
        }, this.props.followParallax.delay);
      } else {
        onMouseMove = this.onMouseMove;
      }
    }
    return onMouseMove;
  };

  Element.prototype.getChildren = function getChildren() {
    var _this6 = this;

    if (!(this.props.followParallax && this.state.domWH && this.state.mouseXY)) {
      return this.props.children;
    }
    var keys = this.props.followParallax.data.map(function (item) {
      return item.key;
    });
    var child = (0, _utils.toArrayChildren)(this.props.children).map(function (item) {
      var num = keys.indexOf(item.key);
      if (num >= 0) {
        var _ret2 = function () {
          var props = (0, _objectAssign2["default"])({}, item.props);
          var style = (0, _objectAssign2["default"])({}, props.style);
          var data = _this6.props.followParallax.data[num];
          if (_this6.props.followParallax.transition) {
            style.transition = _this6.props.followParallax.transition;
          }
          (0, _utils.dataToArray)(data.type).map(_this6.followAnalysisType.bind(_this6, data)).forEach(function (_item) {
            return style[_item.cssName] = (0, _styleUtils.mergeStyle)(style[_item.cssName], _item.data);
          });
          props.style = style;
          return {
            v: _react2["default"].cloneElement(item, props)
          };
        }();

        if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
      }
      return item;
    });
    return child;
  };

  Element.prototype.animEnd = function animEnd() {
    var type = this.state.show ? 'enter' : 'leave';
    this.props.callBack(type);
    this.setState({ show: this.props.show });
  };

  Element.prototype.videoLoadedData = function videoLoadedData() {
    this.onResize();
    if (this.state.show) {
      if (window.addEventListener) {
        window.addEventListener('resize', this.onResize);
      } else {
        window.attachEvent('onresize', this.onResize);
      }
    } else {
      if (window.addEventListener) {
        window.removeEventListener('resize', this.onResize);
      } else {
        window.detachEvent('onresize', this.onResize);
      }
    }
  };

  Element.prototype.addScrollEvent = function addScrollEvent() {
    this.onScroll();
    this.isScroll = true;
    if (window.addEventListener) {
      window.addEventListener('scroll', this.onScroll);
    } else {
      window.attachEvent('onscroll', this.onScroll);
    }
  };

  Element.prototype.followAnalysisType = function followAnalysisType(data, _type) {
    var type = (0, _styleUtils.getGsapType)(_type);
    var cssName = (0, _styleUtils.isConvert)(type);
    // 把 bgParallax 的合进来；
    var bgParallaxStyle = this.state.bgParallaxAnim || {};
    return {
      cssName: cssName,
      data: (0, _styleUtils.mergeStyle)(bgParallaxStyle[cssName] || '', this.getFollowStyle(type, data))
    };
  };

  Element.prototype.cancelRequestAnimationFrame = function cancelRequestAnimationFrame() {
    _ticker2["default"].clear(this.timeoutID);
    _ticker2["default"].clear(this.delayTimeout);
    this.delayTimeout = -1;
    this.timeoutID = -1;
  };

  Element.prototype.animChildren = function animChildren(props, style, bgElem) {
    if (this.tickerId) {
      _ticker2["default"].clear(this.tickerId);
    }
    if (this.delayTimeout) {
      _ticker2["default"].clear(this.delayTimeout);
      this.delayTimeout = null;
    }
    style.display = 'block';
    props.component = this.props.component;
    this.show = this.state.show;
    style.zIndex = this.state.show ? 1 : 0;
    props.children = this.props.show ? bgElem : [bgElem, this.getChildren()];
    var childrenToRender = _react2["default"].createElement(_rcTweenOne2["default"], props);
    var type = this.state.show ? 'enter' : 'leave';
    return this.props.animType(childrenToRender, type, this.props.direction, {
      ease: this.props.ease,
      duration: this.props.duration,
      onComplete: this.animEnd
    }, this.props.elemOffset);
  };

  Element.prototype.render = function render() {
    var props = (0, _objectAssign2["default"])({}, this.props);
    var style = (0, _objectAssign2["default"])({}, props.style);
    style.display = props.show ? 'block' : 'none';
    style.position = 'absolute';
    style.width = '100%';
    props.style = style;
    props.className = ('banner-anim-elem ' + (this.props.prefixCls || '')).trim();
    delete props.direction;
    delete props.show;
    var bgElem = this.props.bg || this.props.img ? this.getImgOrVideo() : null;
    ['prefixCls', 'img', 'bgType', 'callBack', 'animType', 'duration', 'ease', 'elemOffset', 'bg', 'bgType', 'bgParallax', 'followParallax', 'show', 'bgPrefixCls', 'type'].forEach(function (key) {
      return delete props[key];
    });
    if (this.show === this.state.show) {
      style.transform = null;
      if (!this.state.show) {
        return _react2["default"].createElement(_rcTweenOne2["default"], props, bgElem);
      }
      props.onMouseEnter = this.onMouseEnter;
      props.onMouseMove = this.getFollowMouseMove();
      return _react2["default"].createElement(_rcTweenOne2["default"], props, [bgElem, this.getChildren()]);
    }
    return this.animChildren(props, style, bgElem);
  };

  return Element;
}(_react.Component);

Element.propTypes = {
  children: _react.PropTypes.any,
  style: _react.PropTypes.object,
  prefixCls: _react.PropTypes.string,
  bgPrefixCls: _react.PropTypes.string,
  component: _react.PropTypes.any,
  elemOffset: _react.PropTypes.object,
  type: _react.PropTypes.string,
  animType: _react.PropTypes.func,
  img: _react.PropTypes.string,
  bg: _react.PropTypes.string,
  bgType: _react.PropTypes.string,
  ease: _react.PropTypes.string,
  duration: _react.PropTypes.number,
  direction: _react.PropTypes.string,
  callBack: _react.PropTypes.func,
  bgParallax: _react.PropTypes.object,
  followParallax: _react.PropTypes.object,
  show: _react.PropTypes.bool
};
Element.defaultProps = {
  component: 'div',
  bgType: 'img',
  callBack: noop
};

exports["default"] = Element;
module.exports = exports['default'];