'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _Arrow = require('./Arrow');

var _Arrow2 = _interopRequireDefault(_Arrow);

var _Element = require('./Element');

var _Element2 = _interopRequireDefault(_Element);

var _Thumb = require('./Thumb');

var _Thumb2 = _interopRequireDefault(_Thumb);

var _ticker = require('rc-tween-one/lib/ticker');

var _ticker2 = _interopRequireDefault(_ticker);

var _utils = require('./utils');

var _anim = require('./anim');

var _anim2 = _interopRequireDefault(_anim);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var BannerAnim = function (_Component) {
  _inherits(BannerAnim, _Component);

  function BannerAnim() {
    _classCallCheck(this, BannerAnim);

    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));

    ['getDomDataSetToState', 'getRenderChildren', 'getElementHeight', 'getAnimType', 'next', 'prev', 'thumbClick', 'onMouseEnter', 'onMouseLeave', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'autoPlay', 'animEnd', 'animTweenStart'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    _this.state = {
      currentShow: _this.props.initShow,
      direction: null,
      wrapperHeight: 0,
      domRect: {}
    };
    _this.tweenBool = false;
    return _this;
  }

  BannerAnim.prototype.componentDidMount = function componentDidMount() {
    this.getDomDataSetToState();
    if (window.addEventListener) {
      window.addEventListener('resize', this.getDomDataSetToState);
    } else {
      window.attachEvent('onresize', this.getDomDataSetToState);
    }
    if (this.props.autoPlay) {
      this.autoPlay();
    }
  };

  BannerAnim.prototype.componentWillReceiveProps = function componentWillReceiveProps() {
    this.tweenBool = false;
  };

  BannerAnim.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.autoPlayId) {
      _ticker2["default"].clear(this.autoPlayId);
    }
    if (window.addEventListener) {
      window.removeEventListener('resize', this.getDomDataSetToState);
    } else {
      window.detachEvent('onresize', this.getDomDataSetToState);
    }
  };

  BannerAnim.prototype.onMouseEnter = function onMouseEnter() {
    this.props.onMouseEnter();
    if (this.props.autoPlay) {
      _ticker2["default"].clear(this.autoPlayId);
    }
  };

  BannerAnim.prototype.onMouseLeave = function onMouseLeave() {
    this.props.onMouseLeave();
    if (this.props.autoPlay) {
      this.autoPlay();
    }
  };

  BannerAnim.prototype.onTouchStart = function onTouchStart(e) {
    this.mouseXY = {
      startX: e.touches === undefined ? e.clientX : e.touches[0].clientX,
      startY: e.touches === undefined ? e.clientY : e.touches[0].clientY
    };
  };

  BannerAnim.prototype.onTouchMove = function onTouchMove(e) {
    if (!this.mouseXY) {
      return;
    }
    this.mouseXY.currentX = e.touches === undefined ? e.clientX : e.touches[0].clientX;
    this.mouseXY.currentY = e.touches === undefined ? e.clientY : e.touches[0].clientY;
  };

  BannerAnim.prototype.onTouchEnd = function onTouchEnd() {
    var differX = this.mouseXY.currentX - this.mouseXY.startX;
    var differY = this.mouseXY.currentY - this.mouseXY.startY;
    var r = Math.atan2(differY, differX);
    var angle = Math.round(r * 180 / Math.PI);
    angle = angle < 0 ? 360 - Math.abs(angle) : angle;
    if ((angle >= 0 && angle <= 45 || angle >= 315) && differX > this.state.domRect.width * 0.1) {
      this.prev();
    } else if (angle >= 135 && angle <= 225 && differX < -this.state.domRect.width * 0.1) {
      this.next();
    }
    delete this.mouseXY;
  };

  BannerAnim.prototype.getRenderChildren = function getRenderChildren(children) {
    var _this2 = this;

    var elem = [];
    var arrow = [];
    var thumb = void 0;

    var _animType = this.getAnimType(this.props.type);
    (0, _utils.toArrayChildren)(children).forEach(function (item, i) {
      if (!item.key) {
        throw new Error('Please add key, key is required');
      }
      var itemProps = (0, _objectAssign2["default"])({}, item.props);
      switch (item.type) {
        case _Element2["default"]:
          itemProps.key = item.key;
          itemProps.callBack = _this2.animEnd;
          itemProps.show = _this2.state.currentShow === i;
          itemProps.animType = _animType;
          itemProps.duration = _this2.props.duration;
          itemProps.ease = _this2.props.ease;
          itemProps.elemOffset = {
            top: _this2.state.domRect.top,
            width: _this2.state.domRect.width,
            height: _this2.state.wrapperHeight
          };
          itemProps.direction = _this2.state.direction;
          if (_this2.props.bgParallaxAll) {
            itemProps.bgParallax = _this2.props.bgParallaxAll;
          }
          elem.push(_react2["default"].cloneElement(item, itemProps));
          break;
        case _Arrow2["default"]:
          itemProps.next = _this2.next;
          itemProps.prev = _this2.prev;
          itemProps.elemHeight = _this2.state.wrapperHeight;
          arrow.push(_react2["default"].cloneElement(item, itemProps));
          break;
        case _Thumb2["default"]:
          itemProps.thumbClick = _this2.thumbClick;
          itemProps.active = _this2.state.currentShow;
          thumb = _react2["default"].cloneElement(item, itemProps);
          break;
        default:
          break;
      }
    });
    if (elem.length > 1) {
      if (!arrow.length) {
        arrow.push(_react2["default"].createElement(_Arrow2["default"], { arrowType: 'prev', key: 'arrowPrev', next: this.next, prev: this.prev, 'default': true,
          elemHeight: this.state.wrapperHeight
        }), _react2["default"].createElement(_Arrow2["default"], { arrowType: 'next', key: 'arrowNext', next: this.next, prev: this.prev, 'default': true,
          elemHeight: this.state.wrapperHeight
        }));
      }
      if (!thumb) {
        thumb = _react2["default"].createElement(_Thumb2["default"], { length: elem.length, key: 'thumb',
          thumbClick: this.thumbClick,
          active: this.state.currentShow,
          'default': true
        });
      }
    }
    this.elemWrapper = elem;
    return elem.concat(arrow, thumb);
  };

  BannerAnim.prototype.getDomDataSetToState = function getDomDataSetToState() {
    this.dom = _reactDom2["default"].findDOMNode(this);
    var domRect = this.dom.getBoundingClientRect();
    // 获取宽度与定位，setState刷新；
    var wrapperHeight = this.getElementHeight(this.dom.getElementsByClassName('banner-anim-elem'));
    this.setState({
      wrapperHeight: wrapperHeight,
      domRect: domRect
    });
    this.tweenBool = false;
  };

  BannerAnim.prototype.getElementHeight = function getElementHeight(children) {
    var height = 0;
    for (var i = 0; i < children.length; i++) {
      var dom = children[i];
      var _height = dom.getBoundingClientRect().height;
      height = height > _height ? height : _height;
    }
    return height;
  };

  BannerAnim.prototype.getAnimType = function getAnimType(type) {
    var typeArray = type ? (0, _utils.dataToArray)(type) : Object.keys(_anim2["default"]);
    var random = Math.round(Math.random() * (typeArray.length - 1));
    return _anim2["default"][typeArray[random]];
  };

  BannerAnim.prototype.autoPlay = function autoPlay() {
    this.autoPlayId = _ticker2["default"].interval(this.next, this.props.autoPlaySpeed);
  };

  BannerAnim.prototype.animTweenStart = function animTweenStart(show, type) {
    this.props.onChange('before', show);
    this.setState({
      currentShow: show,
      direction: type
    });
  };

  BannerAnim.prototype.animEnd = function animEnd(type) {
    if (type === 'enter') {
      this.tweenBool = false;
      this.props.onChange('after', this.state.currentShow);
    }
  };

  BannerAnim.prototype.next = function next() {
    if (!this.tweenBool) {
      this.tweenBool = true;
      var newShow = this.state.currentShow;
      newShow++;
      if (newShow >= this.elemWrapper.length) {
        newShow = 0;
      }
      this.animTweenStart(newShow, 'next');
    }
  };

  BannerAnim.prototype.prev = function prev() {
    if (!this.tweenBool) {
      this.tweenBool = true;
      var newShow = this.state.currentShow;
      newShow--;
      if (newShow < 0) {
        newShow = this.elemWrapper.length - 1;
      }
      this.animTweenStart(newShow, 'prev');
    }
  };

  BannerAnim.prototype.thumbClick = function thumbClick(i) {
    if (!this.tweenBool) {
      this.tweenBool = true;
      if (i !== this.state.currentShow) {
        var type = i > this.state.currentShow ? 'next' : 'prev';
        this.animTweenStart(i, type);
      }
    }
  };

  BannerAnim.prototype.render = function render() {
    var prefixCls = this.props.prefixCls;
    var props = (0, _objectAssign2["default"])({}, this.props);
    ['prefixCls', 'component', 'initShow', 'duration', 'ease', 'arrow', 'thumb', 'autoPlaySpeed', 'autoPlay'].forEach(function (key) {
      return delete props[key];
    });
    var childrenToRender = this.getRenderChildren(props.children);
    props.className = (props.className + ' ' + (prefixCls || '')).trim();
    props.style = (0, _objectAssign2["default"])({}, props.style);
    if (childrenToRender.length > 1) {
      props.onMouseEnter = this.onMouseEnter;
      props.onMouseLeave = this.onMouseLeave;
      props.onTouchStart = this.onTouchStart;
      props.onMouseDown = this.onTouchStart;
      props.onTouchMove = this.onTouchMove;
      props.onMouseMove = this.onTouchMove;
      props.onTouchEnd = this.onTouchEnd;
      props.onMouseUp = this.onTouchEnd;
    }
    return _react2["default"].createElement(this.props.component, props, childrenToRender);
  };

  return BannerAnim;
}(_react.Component);

var stringOrArray = _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.string]);
BannerAnim.propTypes = {
  children: _react.PropTypes.any,
  style: _react.PropTypes.object,
  className: _react.PropTypes.string,
  prefixCls: _react.PropTypes.string,
  component: _react.PropTypes.any,
  arrow: _react.PropTypes.bool,
  thumb: _react.PropTypes.bool,
  initShow: _react.PropTypes.number,
  type: stringOrArray,
  duration: _react.PropTypes.number,
  ease: _react.PropTypes.string,
  autoPlay: _react.PropTypes.bool,
  autoPlaySpeed: _react.PropTypes.number,
  onChange: _react.PropTypes.func,
  onMouseEnter: _react.PropTypes.func,
  onMouseLeave: _react.PropTypes.func,
  bgParallaxAll: _react.PropTypes.object
};
BannerAnim.defaultProps = {
  component: 'div',
  className: 'banner-anim',
  initShow: 0,
  duration: 450,
  ease: 'easeInOutQuad',
  arrow: true,
  thumb: true,
  autoPlaySpeed: 5000,
  onChange: function onChange() {},
  onMouseEnter: function onMouseEnter() {},
  onMouseLeave: function onMouseLeave() {}
};
BannerAnim.Arrow = _Arrow2["default"];
BannerAnim.Element = _Element2["default"];
BannerAnim.Thumb = _Thumb2["default"];
BannerAnim.animType = _anim2["default"];
BannerAnim.setAnimCompToTagComp = _utils.setAnimCompToTagComp;
exports["default"] = BannerAnim;
module.exports = exports['default'];