'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Thumb = function (_Component) {
  _inherits(Thumb, _Component);

  function Thumb() {
    _classCallCheck(this, Thumb);

    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));

    ['getDefaultThumb'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    return _this;
  }

  Thumb.prototype.getDefaultThumb = function getDefaultThumb() {
    var children = [];
    for (var i = 0; i < this.props.length; i++) {
      children.push(_react2["default"].createElement('span', { key: i }));
    }
    return children;
  };

  Thumb.prototype.render = function render() {
    var _this2 = this;

    var className = 'banner-anim-thumb';
    var defaultClass = className + '-default';
    className = (className + ' ' + (this.props.prefixCls || '')).trim();
    className = !this.props["default"] ? className : (className + ' ' + defaultClass).trim();
    var children = this.props["default"] ? this.getDefaultThumb() : this.props.children;
    if (this.props.length && (0, _utils.toArrayChildren)(children).length !== this.props.length) {
      console.warn('The thumbnail length and the images length different.'); // eslint-disable-line
    }
    var childToRender = (0, _utils.toArrayChildren)(children).map(function (item, i) {
      var props = (0, _objectAssign2["default"])({}, item.props);
      props.onClick = _this2.props.thumbClick.bind(_this2, i);
      props.className = ((props.className || '') + ' ' + (_this2.props.active === i ? 'active' : '')).trim();
      return _react2["default"].cloneElement(item, props);
    });
    var props = (0, _objectAssign2["default"])({}, this.props);
    ['length', 'thumbClick', 'active', 'default', 'component', 'prefixCls'].forEach(function (key) {
      return delete props[key];
    });
    props.className = className;
    return _react2["default"].createElement(this.props.component, props, childToRender);
  };

  return Thumb;
}(_react.Component);

Thumb.propTypes = {
  children: _react.PropTypes.any,
  style: _react.PropTypes.object,
  prefixCls: _react.PropTypes.string,
  component: _react.PropTypes.any,
  thumbClick: _react.PropTypes.func,
  "default": _react.PropTypes.bool,
  length: _react.PropTypes.number,
  active: _react.PropTypes.number
};
Thumb.defaultProps = {
  component: 'div',
  thumbClick: function thumbClick() {}
};

exports["default"] = Thumb;
module.exports = exports['default'];